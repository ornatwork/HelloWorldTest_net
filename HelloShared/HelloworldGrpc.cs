// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloworld.proto
// Original file comments:
// The defenition of the server and the message objects
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace HelloShared {
  /// <summary>
  ///  Sends a Hello greeting, reverse string
  /// </summary>
  public static class PingServer
  {
    static readonly string __ServiceName = "HelloShared.PingServer";

    static readonly Marshaller<global::HelloShared.HelloRequest> __Marshaller_HelloRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HelloShared.HelloRequest.Parser.ParseFrom);
    static readonly Marshaller<global::HelloShared.HelloReply> __Marshaller_HelloReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::HelloShared.HelloReply.Parser.ParseFrom);

    static readonly Method<global::HelloShared.HelloRequest, global::HelloShared.HelloReply> __Method_Hello = new Method<global::HelloShared.HelloRequest, global::HelloShared.HelloReply>(
        MethodType.Unary,
        __ServiceName,
        "Hello",
        __Marshaller_HelloRequest,
        __Marshaller_HelloReply);

    static readonly Method<global::HelloShared.HelloRequest, global::HelloShared.HelloReply> __Method_HelloRandom = new Method<global::HelloShared.HelloRequest, global::HelloShared.HelloReply>(
        MethodType.Unary,
        __ServiceName,
        "HelloRandom",
        __Marshaller_HelloRequest,
        __Marshaller_HelloReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::HelloShared.HelloworldReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for PingServer</summary>
    [System.Obsolete("Client side interfaced will be removed in the next release. Use client class directly.")]
    public interface IPingServerClient
    {
      global::HelloShared.HelloReply Hello(global::HelloShared.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::HelloShared.HelloReply Hello(global::HelloShared.HelloRequest request, CallOptions options);
      AsyncUnaryCall<global::HelloShared.HelloReply> HelloAsync(global::HelloShared.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::HelloShared.HelloReply> HelloAsync(global::HelloShared.HelloRequest request, CallOptions options);
      global::HelloShared.HelloReply HelloRandom(global::HelloShared.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::HelloShared.HelloReply HelloRandom(global::HelloShared.HelloRequest request, CallOptions options);
      AsyncUnaryCall<global::HelloShared.HelloReply> HelloRandomAsync(global::HelloShared.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::HelloShared.HelloReply> HelloRandomAsync(global::HelloShared.HelloRequest request, CallOptions options);
    }

    /// <summary>Interface of server-side implementations of PingServer</summary>
    [System.Obsolete("Service implementations should inherit from the generated abstract base class instead.")]
    public interface IPingServer
    {
      global::System.Threading.Tasks.Task<global::HelloShared.HelloReply> Hello(global::HelloShared.HelloRequest request, ServerCallContext context);
      global::System.Threading.Tasks.Task<global::HelloShared.HelloReply> HelloRandom(global::HelloShared.HelloRequest request, ServerCallContext context);
    }

    /// <summary>Base class for server-side implementations of PingServer</summary>
    public abstract class PingServerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::HelloShared.HelloReply> Hello(global::HelloShared.HelloRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::HelloShared.HelloReply> HelloRandom(global::HelloShared.HelloRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PingServer</summary>
    #pragma warning disable 0618
    public class PingServerClient : ClientBase<PingServerClient>, IPingServerClient
    #pragma warning restore 0618
    {
      public PingServerClient(Channel channel) : base(channel)
      {
      }
      public PingServerClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      ///<summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PingServerClient() : base()
      {
      }
      ///<summary>Protected constructor to allow creation of configured clients.</summary>
      protected PingServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::HelloShared.HelloReply Hello(global::HelloShared.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Hello(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HelloShared.HelloReply Hello(global::HelloShared.HelloRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Hello, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HelloShared.HelloReply> HelloAsync(global::HelloShared.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return HelloAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HelloShared.HelloReply> HelloAsync(global::HelloShared.HelloRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Hello, null, options, request);
      }
      public virtual global::HelloShared.HelloReply HelloRandom(global::HelloShared.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return HelloRandom(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::HelloShared.HelloReply HelloRandom(global::HelloShared.HelloRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HelloRandom, null, options, request);
      }
      public virtual AsyncUnaryCall<global::HelloShared.HelloReply> HelloRandomAsync(global::HelloShared.HelloRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return HelloRandomAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::HelloShared.HelloReply> HelloRandomAsync(global::HelloShared.HelloRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HelloRandom, null, options, request);
      }
      protected override PingServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PingServerClient(configuration);
      }
    }

    /// <summary>Creates a new client for PingServer</summary>
    public static PingServerClient NewClient(Channel channel)
    {
      return new PingServerClient(channel);
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(IPingServer serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_Hello, serviceImpl.Hello)
          .AddMethod(__Method_HelloRandom, serviceImpl.HelloRandom).Build();
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(PingServerBase serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_Hello, serviceImpl.Hello)
          .AddMethod(__Method_HelloRandom, serviceImpl.HelloRandom).Build();
    }

  }
}
#endregion
